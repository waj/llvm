//===-- AMDILAsmPrinter.h -------------------------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//
//
//===----------------------------------------------------------------------===//

#ifndef _AMDIL_ASM_PRINTER_H_
#define _AMDIL_ASM_PRINTER_H_
#include "AMDIL.h"
#include "AMDILLLVMVersion.h"
#include "macrodata.h"
#include "llvm/ADT/DenseSet.h"
#include "llvm/CodeGen/AsmPrinter.h"
#include "llvm/Support/FormattedStream.h"
#include "llvm/Support/Compiler.h"

namespace llvm
{
class AMDILKernelManager;
class AMDILTargetMachine;
class AMDILMachineFunctionInfo;
class AMDILModuleInfo;
class AnalysisUsage;
class Constant;
class Function;
class Module;
class MachineInstr;
class MachineBasicBlock;
class MachineConstantPoolValue;
class MachineFunction;
class MachineJumptableInfo;
class raw_ostream;
class MCStreamer;
class MCSymbol;
class MCInst;
class MCContext;

class LLVM_LIBRARY_VISIBILITY AMDILAsmPrinter : public AsmPrinter
{
public:
  //
  // Constructor for the AMDIL specific AsmPrinter class.
  // Interface is defined by LLVM proper and should reference
  // there for more information.
  //
  explicit AMDILAsmPrinter(AMDIL_ASM_PRINTER_ARGUMENTS);

  //
  // Destructor for the AsmPrinter class that deletes all the
  // allocated memory
  //
  virtual ~AMDILAsmPrinter();

  //
  // @param MI Machine instruction to print the operand of
  // @param opNum operand to print from the specified machine instruciton
  // @param O The output stream for the operand
  // @brief Based on the register type, print out register specific
  // information
  // and add swizzle information in the cases that require it
  //
  virtual void
  printOperand(const MachineInstr *MI, int opNum
               , OSTREAM_TYPE &O
               );

  void
  EmitGlobalVariable(const GlobalVariable *GV);
  // overloading ALL AsmPrinter.h virtual functions to better
  // understand how everything works
  void
  EmitStartOfAsmFile(Module &M);
  void
  EmitEndOfAsmFile(Module &M);
  void
  PrintSpecial(const MachineInstr *MI, const char *Code) const;
  bool
  PrintAsmOperand(const MachineInstr *MI, unsigned int OpNo,
                  unsigned int AsmVariant, const char *ExtraCode);
  bool
  PrintAsmMemoryOperand(const MachineInstr *MI, unsigned int OpNo,
                        unsigned int AsmVariant,
                        const char *ExtraCode);
  void
  EmitMachineConstantPoolValue(MachineConstantPoolValue *MCPV);
  void
  printPICJumpTableSetLabel(unsigned uid,
                            const MachineBasicBlock *MBB) const;
  void
  printPICJumpTableSetLabel(unsigned uid, unsigned uid2,
                            const MachineBasicBlock *MBB) const;
  void
  printPICJumpTableEntry(const MachineJumpTableInfo *MJTI,
                         const MachineBasicBlock *MBB,
                         unsigned uid) const;
  virtual void
  EmitInstruction(const MachineInstr *MI);
  void
  EmitFunctionBodyStart();
  void
  EmitFunctionBodyEnd();
  void
  EmitConstantPool();
  void
  EmitFunctionEntryLabel();

  virtual uint32_t getDebugResourceID(const MachineInstr *MI) const;

  //
  // @param MI Machine instruction to print memory operand of
  // @param opNum operand to print from the specified machine instrucion
  // @param Modifier optional modifier for the memory operand
  // @brief Print the memory operand based on the register type
  //
  void
  printMemOperand(const MachineInstr *MI, int opNum,
                  OSTREAM_TYPE &O,
                  const char *Modifier = NULL);

  //
  // @param MI Machine instruction to print to the buffer
  // @brief autogenerated function from tablegen files that prints out
  // the assembly format of the specified instruction
  //
  void
  printInstruction(const MachineInstr *MI, OSTREAM_TYPE &O);        // autogenerated

  const char *getRegisterName(unsigned RegNo);

  //
  // @param F MachineFunction to print the assembly for
  // @brief parse the specified machine function and print
  // out the assembly for all the instructions in the function
  //
  bool
  runOnMachineFunction(MachineFunction &F);

  //
  // @param MI Machine Instruction to determine if it a macro call
  // @brief Query to see if the instruction is a Macro or not
  // @return true if instruction is a macro
  //
  bool
  isMacroCall(const MachineInstr *MI);

  //
  // @param MI Machine Instruction to determine if the fucntion is a macro
  // @brief determine if the function is a macro function or a normal
  // function
  // @return true if the function call should be transformed to a macro,
  // false otherwise
  //
  bool
  isMacroFunc(const MachineInstr *MI);

  //
  // @param MI Machine instruction to print swizzle for
  // @param opNum the operand number to print swizzle for
  // @brief print out the swizzle for a scalar register class
  //
  const char*
  getSwizzle(const MachineInstr *MI, int opNum);

  //
  // @return the name of this specific pass
  //
  virtual const char*
  getPassName() const;

  /// EmitDwarfRegOp - Emit dwarf register operation
  virtual void EmitDwarfRegOp(const MachineLocation &MLoc) const;

protected:
  //
  // @param MI Machine instruction to emit the macro code for
  //
  // Emits a fully functional macro function that uses the argument
  // registers as the macro arguments.
  //
  virtual void
  emitMacroFunc(const MachineInstr *MI, OSTREAM_TYPE &O);

  // Flag whether to print out debug information
  // or not.
  bool mDebugMode;

  void
  printCopy(const MachineInstr *MI, OSTREAM_TYPE &O);
  //
  //
  void
  emitMCallInst(const MachineInstr *MI, OSTREAM_TYPE &O, const char *name);

  // Set of alll macros that are used in this compilation unit.
  llvm::DenseSet<uint32_t> mMacroIDs;

  /// Pointer to the Target Machine that the asm printer
  /// should be printing compatible code for.
  AMDILTargetMachine *mTM;

  /// pointer to the kernel manager that keeps track
  /// of the metadata required by the runtime to
  /// call a kernel correctly.
  AMDILKernelManager *mMeta;

  /// Class that holds information about the current
  /// function that is being processed.
  AMDILMachineFunctionInfo *mMFI;

  /// Class that holds information about the current
  /// module that is being processed.
  AMDILModuleInfo *mAMI;

  /// Name of the current function being printed
  /// by the asm printer
  std::string mName;

  /// name of the kernel wrapper of the current function
  std::string mKernelName;

private:
  void addCPoolLiteral(const Constant *C);

  /// The constant buffer that the data should be
  /// allocated in by the runtime
  int mBuffer;

  /// Flag to determine whether the printer needs
  /// to print assembly version information in the metadata
  bool mNeedVersion;
};
} // end of llvm namespace

#endif // _AMDIL_ASM_PRINTER_H_
