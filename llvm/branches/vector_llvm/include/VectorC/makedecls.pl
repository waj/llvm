#!/usr/bin/perl

@types = ('int', short, long, char);
@funcs = (['<type>', vimm, '<type>', unsigned],
	  ['<type>', fixed_vimm, '<type>', unsigned],
	  ['<type>', vgather, 'const <type>*', '...'],
	  [void, vscatter, '<type>', '<type>*', '...'],
	  ['<type>', load, 'const <type>*', unsigned, 'int'],
	  ['<type>', store, '<type>', '<type>*', 'int'],
	  ['<type>', vselect, 'int', '<type>', '<type>'],
	  ['<type>', extract, '<type>', unsigned, unsigned, unsigned],
	  ['<type>', combine, '<type>', '<type>', unsigned, unsigned],
	  ['<type>', fixed_combine, '<type>', unsigned, '<type>', unsigned, unsigned, unsigned],
	  ['<type>', extractelement, '<type>', unsigned],
	  ['<type>', combineelement, '<type>', '<type>', unsigned],
	  ['<type>', constant, '<type>', '...'],
	  ['<type>', fixed_permute, '<type>', unsigned, '<type>', unsigned],
# Older forms (for compatibility)
	  ['<type>', vload, 'const <type>*', '...'],
	  ['<type>', vloadi, '<type>', unsigned],
	  [void, vstore, '<type>', '<type>*', '...']
	  );

sub resolve(@) {
    my ($str, $type) = @_;
    $str =~ s/<type>/$type/g;
    return $str;
}

sub print_decl(@) {
    my ($func, $type) = @_;
    my $ext = $type;
    $ext =~ s/ /_/g;

    #_... form
    print resolve($func->[0], $type);
    print " _$func->[1]_$ext(";
    for (my $i = 2; $i < $#{$func}; ++$i) {
	print resolve($func->[$i], $type);
	print ", ";
    }
    print resolve($func->[$#{$func}], $type);
    print ");\n";

    # Alternate (newer, preferred) vllvm_... form
    print resolve($func->[0], $type);
    print " vllvm_$func->[1]_$ext(";
    for (my $i = 2; $i < $#{$func}; ++$i) {
	print resolve($func->[$i], $type);
	print ", ";
    }
    print resolve($func->[$#{$func}], $type);
    print ");\n";

    if ($type =~ /unsigned\s+(\w+)/) {
	$ext = 'u'.$1;
	print resolve($func->[0], $type);
	print " vllvm_$func->[1]_$ext(";
	for (my $i = 2; $i < $#{$func}; ++$i) {
	    print resolve($func->[$i], $type);
	    print ", ";
	}
	print resolve($func->[$#{$func}], $type);
	print ");\n";
    }

}

print "// VectorC.h\n";
print "// Header file for Vector C significant functions\n";
print "// File autogenerated by $0\n\n";
print "typedef unsigned char uchar;\n";
print "typedef unsigned short ushort;\n";
print "typedef unsigned int uint;\n";
foreach (@funcs) {
    my $func = $_;
    foreach (@types) {
	my $type = $_;
	print_decl($func, $type);
	print_decl($func, "unsigned ".$type);
    }
}

