At the moment there are branched for three projects
here. Some are experimental. Use with caution,
expect bugs ;-)

Questions? <mailto:ggreif@gmail.com>

--------------------------------------------------------------------------------
1) Parallel "make check".
Modelled after the successful clang "make test -jX" experiment, I am
now bold enough to sink my teeth into the LLVM test suite.
I have a functional implementation, along the same lines, ready.

BRANCH NAME: parallelized-test
USAGE:
  cd llvm/test
  svn switch http(s)://llvm.org/svn/llvm-project/llvm/branches/ggreif/parallelized-test .

 alternatively (preferred) you can only switch
 the two affected files (and one directory that is to be deleted):

  cd llvm/test
  svn switch http(s)://llvm.org/svn/llvm-project/llvm/branches/ggreif/parallelized-test/Makefile Makefile
  svn switch http(s)://llvm.org/svn/llvm-project/llvm/branches/ggreif/parallelized-test/lib/llvm.exp lib/llvm.exp
  svn switch http(s)://llvm.org/svn/llvm-project/llvm/branches/ggreif/parallelized-test/Transforms/DecomposeMultiDimRefs Transforms/DecomposeMultiDimRefs
  rm -r Transforms/DecomposeMultiDimRefs

STATUS: defunct, removed. ddunbar's 'lit' does all this but better.

--------------------------------------------------------------------------------
2) <class Use> size reduction.
After some conversation with Chris I think we are ready for a
16 -> 12 byte size reduction of the Use class. There are some
collateral improvements too. This project is basically complete
(only waves 4 to 7 need some more work) and ready to be merged
to trunk.

WHY ON A BRANCH:
Contrary to the accepted development model of LLVM, which
predominantly uses the trunk for ongoing (even disruptive)
development, I am more comfortable with developing on a branch,
because I tend to perform many small changes on different
machines and cannot guarantee compilability when checking in.

SYNOPSIS:
There will be seven waves until this project can be closed. A
wave is defined as a point in the implementation that is consistent,
correct and mergable to trunk. Each wave starts with some general
discussion of how I should proceed, and what the exact scope of the
wave should be. Each wave ends with a code review and
the necessary rework (which may require a new review, etc.).
Whether a merge actually takes place will be decided on a
case-by-case basis.

WAVE1: Finalize the design, document it, adapt memory allocation for Users.
       Caveats: 'operator new' and 'operator delete' must match.

WAVE2: Remove Use objects that are embedded in Users. 'operator new' now
       performs real work. Create wrappers to destructor and 'operator delete'
       that do the right thing (where needed).
       Assertions ensure consistency of stored and computed User in the Use.

WAVE3: Remove User* from Use, introducing surrogate getters. Embedded and
       out-of-object representations being considered.

WAVE4: Flip indexing order of Uses. This involves changing the iterators.
       NOTE: This wave is probably void.

WAVE5: Stylistic and performance tweaks. Valgrind testing.
       Doxygenizing of new interfaces.

WAVE6: Realizing additional savings. Several space vs. time tradeoffs to
       be balanced. May involve tweaking some basic interfaces.

WAVE7: Measurements, finishing touches.

BRANCH NAME: use-diet
USAGE:
  cd llvm
  svn switch http(s)://llvm.org/svn/llvm-project/llvm/branches/ggreif/use-diet .

STATUS: waves 1..3 already merged to trunk and released in 2.4. Measured 13% memory
  savings on big testcases (dealII). An estimated another 10% seems realistic
  with waves 4..6. Ideas formulated, implementation started. Feasibility uncertain.
  Branch removed. Several more ideas to be pursued for gaining back speed.

--------------------------------------------------------------------------------
3) Son of Use-Diet

Reduction of struct Use size to 2 pointers. Uses a variant of the original
waymarking algorithm. Implementation exists and applicable against release 2.4.

BRANCH NAME: son-of-use-diet_24

STATUS: Done. Realized the space savings, but we got 100% speed penalty.
        Good as a proof-o- concept :-)
